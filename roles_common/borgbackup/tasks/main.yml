---
# Pakete installieren
- name: pakete installieren
  apt:
    pkg: "{{ item }}"
    update_cache: yes
    state: present
  with_items:
    - borgbackup
    - logrotate
    - moreutils
    - openssl

- name: create directories 1
  file: 
    path: "{{ item }}"
    state: "directory"
  with_items:
    - /srv/borgbackup 
    - /var/log/borgbackup 

- name: create directories 2
  file: 
    path: "/srv/borgbackup/{{ item.key }}"
    state: "directory"
  with_dict: "{{ borgbackup_repos }}"

- name: generate new repo_passphrase (check)
  stat:
    path: /srv/borgbackup/repo_passphrase 
  register: repo_passphrase 

- name: generate new repo_passphrase (generate)
  command: openssl rand -base64 -out /srv/borgbackup/repo_passphrase 24 
  when: repo_passphrase.stat.exists == False 

- name: generate new repo_sshkey (check)
  stat:
    path: /srv/borgbackup/repo_sshkey 
  register: repo_sshkey 

- name: generate new repo_sshkey (generate)
  command: ssh-keygen -N '' -t ed25519 -f /srv/borgbackup/repo_sshkey
  when: repo_sshkey.stat.exists == False 

- name: get secrets from server 1
  slurp: src={{ item }}
  with_items:
    - /srv/borgbackup/repo_passphrase 
  register: borgbackup_secrets

- name: get secrets from server 2
  set_fact: 
    repo_passphrase: "{{ borgbackup_secrets.results | selectattr('item', 'equalto', '/srv/borgbackup/repo_passphrase') | map(attribute='content') | list | first | b64decode | regex_replace('\\s', '') }}" 


# BorgBackup Scripte erstellen 

- name: BorgBackup Scripte erstellen (check)
  template: 
    src: borgbackup-check.sh 
    dest: /srv/borgbackup/{{ item.key }}/borgbackup-check.sh 
    mode: o+x
  with_dict: "{{ borgbackup_repos }}"

- name: BorgBackup Scripte erstellen (create)
  template: 
    src: borgbackup-create.sh 
    dest: /srv/borgbackup/{{ item.key }}/borgbackup-create.sh 
    mode: o+x
  with_dict: "{{ borgbackup_repos }}"

- name: BorgBackup Scripte erstellen (delete)
  template: 
    src: borgbackup-delete.sh 
    dest: /srv/borgbackup/{{ item.key }}/borgbackup-delete.sh 
    mode: o+x
  with_dict: "{{ borgbackup_repos }}"
  
- name: BorgBackup Scripte erstellen (init)
  template: 
    src: borgbackup-init.sh 
    dest: /srv/borgbackup/{{ item.key }}/borgbackup-init.sh 
    mode: o+x
  with_dict: "{{ borgbackup_repos }}"

- name: BorgBackup Scripte erstellen (info)
  template: 
    src: borgbackup-info.sh 
    dest: /srv/borgbackup/{{ item.key }}/borgbackup-info.sh 
    mode: o+x
  with_dict: "{{ borgbackup_repos }}"

- name: BorgBackup Scripte erstellen (list)
  template: 
    src: borgbackup-list.sh 
    dest: /srv/borgbackup/{{ item.key }}/borgbackup-list.sh 
    mode: o+x
  with_dict: "{{ borgbackup_repos }}"

- name: BorgBackup Scripte erstellen (mount)
  template: 
    src: borgbackup-mount.sh 
    dest: /srv/borgbackup/{{ item.key }}/borgbackup-mount.sh 
    mode: o+x
  with_dict: "{{ borgbackup_repos }}"

- name: BorgBackup Scripte erstellen (prometheus)
  template: 
    src: borgbackup-prometheus.sh 
    dest: /srv/borgbackup/borgbackup-prometheus.sh 
    mode: o+x
  
- name: BorgBackup LogRotate config erstellen 
  template: 
    src: logrotate 
    dest: /etc/logrotate.d/borgbackup

- name: Alten cronjob entfernen falls vorhanden  
  cron: 
    name: "borgbackup" 
    state: absent

- name: Cronjob für BorgBackup Backup 
  cron: name="borgbackup-{{ item.key }}" weekday="{{ item.value.weekday }}" hour="{{ item.value.hour }}" minute="{{ item.value.minute }}" job="/srv/borgbackup/{{ item.key }}/borgbackup-create.sh 2>&1 | ts '[\\%Y-\\%m-\\%d \\%H:\\%M:\\%S]' >> /var/log/borgbackup/{{ item.key }}.log"
  with_dict: "{{ borgbackup_repos }}"

- name: Cronjob für BorgBackup Prometheus export  
  cron: name="borgbackup-prom" weekday="*" hour="*" minute="40" job="/srv/borgbackup/borgbackup-prometheus.sh 2>&1 | ts '[\\%Y-\\%m-\\%d \\%H:\%M:\\%S]' >> /var/log/borgbackup/borgbackup-prometheus.log"
  
